#!/bin/bash

set -x
set -e

usage()
{
  echo "linux-dev - small script to help with common kernel tasks"
  echo
  echo "|------------------+-------------------------------------------------|"
  echo "| arg              |                                                 |"
  echo "|------------------+-------------------------------------------------|"
  echo "|                  | No argument equals build and install the kernel |"
  echo "| build            | Only build the kernel                           |"
  echo "| install          | Only install the kernel.                        |"
  echo "| remove <VERSION> | Clean up a previously installed kernel.         |"
  echo "|------------------+-------------------------------------------------|"
}

check_for()
{
  if [ ! -f $1 ]; then
    echo "fatal: did not detect $1"
    echo "Please run in the top level kernel directory!"
    exit
  fi
}

build_prepare()
{
    make clean
    echo "INFO: expecting only one config file in /boot/"
    check_for .config
    make olddefconfig
}

build()
{
    make -j`grep -Pc '^processor\t' /proc/cpuinfo`
    make modules
}

install_kernel()
{
    sudo make modules_install
    sudo make install
}

uninstall_kernel()
{
  KERNEL_VERSION=$1
  if [ "$KERNEL_VERSION" == "" ] ; then
    echo "please supply a kernel version, e.g. 4.9.0 or any of the other ones in:"
    ls /boot/vmlinuz-*
    exit
  fi
  rm /boot/*$KERNEL_VERSION*
  rm -rvf /lib/modules/*$KERNEL_VERSION
  # cd /usr/src/kernels/linux-$KERNEL_VERSION
  # make clean
  #  rm -rvf /usr/src/kernels/linux-$KERNEL_VERSION
}

update_grub()
{
  if [ -f /etc/fedora-release ]; then
    sudo grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg
  elif [ -f /etc/debian-release ]; then
    sudo update-grub
  else
    echo "You might want to update the grub configuration!"
  fi
}

if [[ "remove" == $1 ]]; then
  uninstall_kernel $2
elif [[ "help" == $1 ]] || [[ "?" == $1 ]] ; then
  set +x
  set +e
  usage
  exit
else
  check_for Kconfig

  if [[ "install" == $1 ]]; then
    echo skipping build
  else
    build_prepare
    build
  fi

  if [[ "build" == $1 ]]; then
    echo skipping install
  else
    install_kernel
  fi
fi

update_grub

echo "Maybe you also want to?\nsudo make headers_install INSTALL_HDR_PATH=/usr"
